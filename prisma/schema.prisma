// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  name      String
  email     String   @unique
  password  String
  role      Role
  dateBirth DateTime
  image     String?
  active    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?
  admin   Admin?
}

model Student {
  id         Int          @id @default(autoincrement())
  idUser     Int          @unique
  //mais atributos serão colocados depois da resposta da Matera
  user       User         @relation(fields: [idUser], references: [id])
  enrollment Enrollment[]
}

model Admin {
  id     Int  @id @default(autoincrement())
  idUser Int  @unique
  //mais atributos serão colocados depois da resposta da Matera
  user   User @relation(fields: [idUser], references: [id])
}

model Course {
  id               Int      @id @default(autoincrement())
  name             String
  description      String
  image            String
  duration         Int
  certificateModel String
  createdAt        DateTime @default(now())
  createdBy        Int
  updatedAt        DateTime @updatedAt
  updatedBy        Int

  enrollments Enrollment[]
  alerts      Alert[]
  materials   Material[]
  modules     Module[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  idStudent Int
  idCourse  Int
  active    Boolean
  completed Boolean
  stardData DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student     Student      @relation(fields: [idStudent], references: [id])
  course      Course       @relation(fields: [idCourse], references: [id])
  certificate Certificate?
}

model Certificate {
  id               Int      @id @default(autoincrement())
  idEnrollment     Int      @unique
  emited           Boolean
  codeVerification BigInt
  createdAt        DateTime @default(now())

  enrollment Enrollment @relation(fields: [idEnrollment], references: [id])
}

model Alert {
  id        Int      @id @default(autoincrement())
  idCourse  Int
  title     String
  message   String
  createdAt DateTime @default(now())
  createdBy Int
  updatedAt DateTime @updatedAt
  updatedBy Int

  course Course @relation(fields: [idCourse], references: [id])
}

model Material {
  id          Int       @id @default(autoincrement())
  idCourse    Int
  name        String
  description String
  filename    String
  type        TypeMidia
  link        String
  createdAt   DateTime  @default(now())
  createdBy   Int
  updatedAt   DateTime  @updatedAt
  updatedBy   Int

  course Course @relation(fields: [idCourse], references: [id])
}

model Module {
  id          Int      @id @default(autoincrement())
  idCourse    Int
  name        String
  description String
  order       Int
  createdAt   DateTime @default(now())
  createdBy   Int
  updatedAt   DateTime @updatedAt
  updatedBy   Int

  course       Course         @relation(fields: [idCourse], references: [id])
  videoLecture VideoLecture[]
  questions    Question[]
}

model VideoLecture {
  id          Int      @id @default(autoincrement())
  idModule    Int
  name        String
  description String
  duration    Int
  link        String
  order       Int
  createdAt   DateTime @default(now())
  createdBy   Int
  updatedAt   DateTime @updatedAt
  updatedBy   Int

  module Module @relation(fields: [idModule], references: [id])
}

model Question {
  id           Int          @id @default(autoincrement())
  idModule     Int
  questionText String
  type         TypeQuestion
  order        Int
  createdAt    DateTime     @default(now())
  createdBy    Int
  updatedAt    DateTime     @updatedAt
  updatedBy    Int

  module Module @relation(fields: [idModule], references: [id])
}

model Option {
  id         Int      @id @default(autoincrement())
  idQuestion Int
  optionText String
  correct    Boolean
  createdAt  DateTime @default(now())
  createdBy  Int
  updatedAt  DateTime @updatedAt
  updatedBy  Int
}

enum Role {
  ADMIN
  STUDENT
}

enum TypeMidia {
  PDF
  AUDIO
  IMAGE
  TEXT
  SLIDES
  LINK
  CODE
}

enum TypeQuestion {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}
